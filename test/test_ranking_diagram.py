"""Unit tests for ranking_diagram.py static helper methods.

Code generated by Cursor AI
"""

import unittest
from unittest.mock import Mock

from iihf.ranking_diagram import RankingDiagramGenerator


class TestRankingDiagramGenerator(unittest.TestCase):
    """Test cases for RankingDiagramGenerator static methods."""

    def test_get_border_properties_new_participant(self):
        """Test border properties for new participants."""
        color, width = RankingDiagramGenerator.get_border_properties(True)
        self.assertEqual(color, "white")
        self.assertEqual(width, 8)

    def test_get_border_properties_existing_participant(self):
        """Test border properties for existing participants."""
        color, width = RankingDiagramGenerator.get_border_properties(False)
        self.assertEqual(color, "black")
        self.assertEqual(width, 1)

    def test_calculate_flag_position(self):
        """Test flag position calculation."""
        x, y = RankingDiagramGenerator.calculate_flag_position(
            col_idx=2, rank=5, flag_width=45.0, flag_height=30.0, horizontal_spacing=11.25, vertical_spacing=30.0
        )
        expected_x = 2 * (45.0 + 11.25)  # 112.5
        expected_y = (5 - 1) * (30.0 + 30.0)  # 240.0
        self.assertEqual(x, expected_x)
        self.assertEqual(y, expected_y)

    def test_calculate_layout_dimensions(self):
        """Test layout dimensions calculation."""
        total_width, total_height = RankingDiagramGenerator.calculate_layout_dimensions(
            num_cols=3, num_rows=4, flag_width=45.0, flag_height=30.0, horizontal_spacing=11.25, vertical_spacing=30.0
        )
        expected_width = 3 * 45.0 + 2 * 11.25  # 135.0 + 22.5 = 157.5
        expected_height = 3 * (30.0 + 30.0) + 30.0  # 180.0 + 30.0 = 210.0
        self.assertEqual(total_width, expected_width)
        self.assertEqual(total_height, expected_height)

    def test_calculate_figure_size(self):
        """Test figure size calculation."""
        fig_width, fig_height = RankingDiagramGenerator.calculate_figure_size(num_cols=20, num_rows=10)
        # Default scale factors: 20/20 = 1.0, 12/10 = 1.2
        expected_width = 20 * 1.0  # 20.0
        expected_height = 10 * 1.2  # 12.0
        self.assertEqual(fig_width, expected_width)
        self.assertEqual(fig_height, expected_height)

    def test_is_new_participant_first_column(self):
        """Test new participant detection for first column."""
        result = RankingDiagramGenerator.is_new_participant(
            participant=Mock(), col_idx=0, superevents=[Mock(), Mock()], data=Mock(), top_positions=10
        )
        self.assertTrue(result)

    def test_is_new_participant_not_in_previous(self):
        """Test new participant detection when not in previous superevent."""
        mock_prev_superevent = Mock()
        mock_participant = Mock()
        # The previous superevent data does NOT contain the participant
        mock_data = {mock_prev_superevent: {Mock(): Mock()}}  # Different participant
        result = RankingDiagramGenerator.is_new_participant(
            participant=mock_participant,
            col_idx=1,
            superevents=[mock_prev_superevent, Mock()],
            data=mock_data,
            top_positions=10,
        )
        self.assertTrue(result)

    def test_is_new_participant_invalid_previous_rank(self):
        """Test new participant detection when previous rank is invalid."""
        mock_prev_superevent = Mock()
        mock_participant = Mock()
        mock_placement = Mock()
        mock_placement.four_year_rank = float("inf")
        mock_data = {mock_prev_superevent: {mock_participant: mock_placement}}  # Previous superevent data
        result = RankingDiagramGenerator.is_new_participant(
            participant=mock_participant,
            col_idx=1,
            superevents=[mock_prev_superevent, Mock()],
            data=mock_data,
            top_positions=10,
        )
        self.assertTrue(result)

    def test_is_new_participant_valid_previous_rank(self):
        """Test new participant detection when previous rank is valid."""
        mock_prev_superevent = Mock()
        mock_participant = Mock()
        mock_placement = Mock()
        mock_placement.four_year_rank = 5  # Valid rank
        mock_data = {mock_prev_superevent: {mock_participant: mock_placement}}  # Previous superevent data
        result = RankingDiagramGenerator.is_new_participant(
            participant=mock_participant,
            col_idx=1,
            superevents=[mock_prev_superevent, Mock()],
            data=mock_data,
            top_positions=10,
        )
        self.assertFalse(result)

    def test_is_new_participant_previous_rank_outside_range(self):
        """Test new participant detection when previous rank is outside displayed range."""
        mock_prev_superevent = Mock()
        mock_participant = Mock()
        mock_placement = Mock()
        mock_placement.four_year_rank = 15  # Outside top 10
        mock_data = {mock_prev_superevent: {mock_participant: mock_placement}}  # Previous superevent data
        result = RankingDiagramGenerator.is_new_participant(
            participant=mock_participant,
            col_idx=1,
            superevents=[mock_prev_superevent, Mock()],
            data=mock_data,
            top_positions=10,
        )
        self.assertTrue(result)


if __name__ == "__main__":
    unittest.main()
